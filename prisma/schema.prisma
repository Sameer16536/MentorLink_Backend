// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MENTOR
  MENTEE
  ADMIN
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String?
  googleId  String?  @unique
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  otp           PasswordResetToken[]
  mentorProfile MentorProfile?
  menteeProfile MenteeProfile?

  mentorSessions Session[] @relation("MentorSessions")
  menteeSessions Session[] @relation("MenteeSessions")

  givenReviews    Review[] @relation("GivenReviews")
  receivedReviews Review[] @relation("ReceivedReviews")

  refreshTokens      RefreshToken[]
  chatMessages       ChatMessage[]
  payments           Payment[]
  Feedback           Feedback[]
  MentorAvailability MentorAvailability[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  otp       String   @unique
  createdAt DateTime @default(now())
  expiredAt DateTime
  used      Boolean  @default(false)
}

model MentorProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
  skills           String[]
  tag              String[]
  bio              String?
  experience       Int?
  imageProfileUrl  String?
  rating           Float?   @default(0)
  freeSessionCount Int?     @default(0)
  hourlyRate       Int?
  isAvailable      Boolean  @default(false)
  stripeAccountId  String?
}

model MenteeProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  interests String[]
}

model Session {
  id                 String               @id @default(cuid())
  mentor             User                 @relation("MentorSessions", fields: [mentorId], references: [id])
  mentorId           String
  mentees            User[]               @relation("MenteeSessions")
  startTime          DateTime
  endTime            DateTime
  videoUrl           String?
  agenda             String?
  isGroup            Boolean              @default(false)
  feedback           Feedback?
  recordingId        String?
  createdAt          DateTime             @default(now())
  videoRecordings    VideoRecording[]
  payments           Payment[]
  status             String               @default("PENDING")
  paymentStatus      String               @default("UNPAID")
  paidAt             DateTime?
  MentorAvailability MentorAvailability[]
}

model MentorAvailability {
  id        String   @id @default(cuid())
  mentor    User     @relation(fields: [mentorId], references: [id])
  mentorId  String
  startTime DateTime
  endTime   DateTime
  isBooked  Boolean  @default(false)
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String?
  createdAt DateTime @default(now())
}

model Feedback {
  id         String   @id @default(cuid()) // Unique ID
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId  String   @unique
  notes      String
  createdAt  DateTime @default(now())
  rating     Int?
  fromUser   User?    @relation(fields: [fromUserId], references: [id])
  fromUserId String?
}

model Review {
  id        String   @id @default(cuid())
  from      User     @relation("GivenReviews", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedReviews", fields: [toId], references: [id])
  toId      String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model VideoRecording {
  id         String   @id @default(cuid())
  url        String
  session    Session? @relation(fields: [sessionId], references: [id])
  sessionId  String?
  transcoded Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
}

model ChatMessage {
  id        String   @id @default(cuid())
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  topic     String
  message   String
  createdAt DateTime @default(now())
}

model Payment {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id]) // Mentee who paid
  userId String

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  amount          Int
  platformFee     Int
  status          PaymentStatus
  method          String?
  stripeSessionId String?
  stripeIntentId  String?
  createdAt       DateTime      @default(now())
}
